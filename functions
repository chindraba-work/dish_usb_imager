# SPDX-License-Identifier: MIT

# Copyright 2023 Chindraba (Ronald Lamoreaux) <DishUSBImager@chindraba.work>

# Helper functions for DishUSBImager script

. "${script_dir}/scripts/errorOut.sh"
. "${script_dir}/scripts/messageOut.sh"

usage() {
    errorOut "${usage_text}"
}

findArchiveDir() {
    if [[ -n "$archive_dir" ]]
    then
        if [[ -d "$( pwd )/${archive_dir}" ]]
        then
            archive_dir="$( pwd )/${archive_dir}"
        elif [[ -d "${script_dir}/${archive_dir}" ]]
        then
            archive_dir="${script_dir}/${archive_dir}"
        elif [[ ! -d "$archive_dir" ]]
        then
            errorOut "$archive_dir_not_found"
            archive_dir=''
            archive_dir="$( findArchiveDir )"
        fi
    elif [[ -d '/var/opt/DishUSBImager/' ]]
    then
        archive_dir='/var/opt/DishUSBImager'
    elif [[ -d "${script_dir}/archives" ]]
    then
        archive_dir="${script_dir}/archives"
    else
        errorOut "$making_archive_dir"
        mkdir -p '/var/opt/DishUSBImager/archives' 2>/dev/null
        archive_dir='/var/opt/DishUSBImager/archives'
    fi
    echo "$archive_dir"
}

findArchiveVersion() {
    _temp_version="$(curl -v "${archive_repo}/${archive_handle}.${archive_type}" 2>&1 1>/dev/null|grep -i '< Location'|cut -d"/" -f3|cut -d. -f1)"
    if [[ -n "$_temp_version" ]]
    then
        echo $_temp_version
    else
        exit 1
    fi
}

findLocalVersion() {
    _local_version="${archive_handle}.${archive_type}";
    if [[ -s "$_local_version" ]]
    then
        _local_version="$(find . -inum $(stat --printf="%i" "$_local_version")|grep -v "$_local_version"|cut -d"/" -f2)"
    fi
    echo "$( echo "$_local_version"|cut -d. -f1 )"
}

readConfiData() {
    if [[ -e "/etc/opt/${config_name}" ]]
    then
        source '/etc/opt/DishUSBImagerrc'
    elif [[ -e "${script_dir}/${config_name}" ]]
    then
        source "${script_dir}/${config_name}"
    else
        errorOut "${no_conf_text}"
        archive_repo='https://dns.dish.com/img_repo'
        archive_handle='STBImage'
        archive_type='zip'
        archive_dir=''
    fi
}

loadVersionData() {
    archive_url="${archive_repo:=https://dns.dish.com/img_repo}/${archive_handle:=STBImage}.${archive_type:=zip}"
    archive_dir="$( findArchiveDir )"
    archive_path="${archive_dir}/${archive_handle}.${archive_type}"
    if [[ ! -d "${archive_dir}" ]]
    then
        errorOut "${missing_archive_dir}"
        exit 1
    fi
    local_version="$( findLocalVersion )"
    remote_version="$( findArchiveVersion )"
    if [[ 0 -ne $? ]]
    then
        errorOut "${missing_remote}"
        exit 1
    fi
}

# vim: syntax=bash ts=4 sw=4 sts=4 et sr
